{"version":3,"sources":["components/Todo.js","components/TodoList.js","App.js","index.js"],"names":["ButtonStyled","styled","Button","p","isCompleted","css","Todo","todo","onCheckBtnClick","shouldFitContainer","iconAfter","className","onClick","id","primaryColor","name","TodoList","todoList","map","TODO_APP_STORAGE_KEY","App","useState","setTodoList","textInput","setTextInput","useEffect","storagedTodoList","localStorage","getItem","JSON","parse","setItem","stringify","onTextInputChange","useCallback","e","target","value","onAddBtnClick","v4","prevState","placeholder","elemAfterInput","isDisabled","appearance","padding","onChange","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oRAKMA,EAAeC,YAAOC,IAAPD,CAAH,0WAMV,SAACE,GAAD,OACAA,EAAEC,aACFC,YADA,iFAqBO,SAASC,EAAT,GAA0C,IAA1BC,EAAyB,EAAzBA,KAAMC,EAAmB,EAAnBA,gBACjC,OACI,cAACR,EAAD,CACII,YAAaG,EAAKH,YAClBK,oBAAkB,EAClBC,WACKH,EAAKH,aACF,sBAAMO,UAAU,aAAaC,QAAS,kBAAMJ,EAAgBD,EAAKM,KAAjE,SACI,cAAC,IAAD,CAAWC,aAAa,cANxC,SAWKP,EAAKQ,OC3CH,SAASC,EAAT,GAAkD,IAA9BC,EAA6B,EAA7BA,SAAUT,EAAmB,EAAnBA,gBACzC,OACI,mCACCS,EAASC,KAAI,SAACX,GAAD,OACV,cAACD,EAAD,CAAoBC,KAAMA,EAAMC,gBAAiBA,GAAtCD,EAAKM,S,oBCDtBM,EAAuB,WAkEdC,MAhEf,WAEE,MAAgCC,mBAAS,IAAzC,mBAAOJ,EAAP,KAAiBK,EAAjB,KACA,EAAkCD,mBAAS,IAA3C,mBAAOE,EAAP,KAAkBC,EAAlB,KAEAC,qBAAU,WACR,IAAMC,EAAmBC,aAAaC,QAAQT,GAC1CO,GACFJ,EAAYO,KAAKC,MAAMJ,MAExB,IAEHD,qBAAU,WACRE,aAAaI,QAAQZ,EAAsBU,KAAKG,UAAUf,MACzD,CAACA,IAGJ,IAAMgB,EAAoBC,uBAAY,SAACC,GACrCX,EAAaW,EAAEC,OAAOC,SACrB,IAEGC,EAAgBJ,uBACpB,SAACC,GAECb,EAAY,CACV,CAAET,GAAI0B,cAAMxB,KAAMQ,EAAWnB,aAAa,IADjC,mBAENa,KAELO,EAAa,MAEf,CAACD,EAAWN,IAGRT,EAAkB0B,uBAAY,SAACrB,GACnCS,GAAY,SAAAkB,GAAS,OACnBA,EAAUtB,KAAI,SAAAX,GAAI,OAChBA,EAAKM,KAAOA,EAAZ,2BAAsBN,GAAtB,IAA4BH,aAAa,IAASG,UAGrD,IAEH,OACE,qCACE,mDAGA,cAAC,IAAD,CAAWQ,KAAK,WAAW0B,YAAY,uBAAuBC,eAC5D,cAAC,IAAD,CACEC,YAAapB,EACbqB,WAAW,UACXhC,QAAS0B,EAHX,qBAQAjC,IAAK,CAAEwC,QAAS,eAChBR,MAAOd,EACPuB,SAAUb,IAEZ,cAACjB,EAAD,CAAUC,SAAUA,EAAUT,gBAAiBA,QC9DrDuC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.d77e9614.chunk.js","sourcesContent":["import React from 'react';\r\nimport Button from '@atlaskit/button';\r\nimport styled, { css } from 'styled-components';\r\nimport CheckIcon from '@atlaskit/icon/glyph/check';\r\n\r\nconst ButtonStyled = styled(Button)`\r\n    margin-top: 5px;\r\n    text-align: left;\r\n\r\n    &,\r\n    &:hover {\r\n      ${(p) =>\r\n        p.isCompleted &&\r\n        css`\r\n          text-decoration: line-through;\r\n        `}\r\n    }\r\n\r\n    &:hover {\r\n        .check-icon{\r\n            display:inline-block;\r\n        }\r\n    }\r\n    .check-icon {\r\n        display:none;\r\n\r\n        &:hover {\r\n            background-color: #e2e2e2;\r\n            border-radius: 3px;\r\n        }\r\n    }\r\n`;\r\n\r\nexport default function Todo({ todo, onCheckBtnClick }) {\r\n    return (\r\n        <ButtonStyled\r\n            isCompleted={todo.isCompleted}\r\n            shouldFitContainer\r\n            iconAfter={\r\n                !todo.isCompleted && (\r\n                    <span className='check-icon' onClick={() => onCheckBtnClick(todo.id)}>\r\n                        <CheckIcon primaryColor='#4fff4f' />\r\n                    </span>\r\n                )\r\n            }\r\n        >\r\n            {todo.name}\r\n        </ButtonStyled>\r\n    );\r\n}\r\n","import React from 'react'\r\nimport Todo from './Todo'\r\n\r\nexport default function TodoList({ todoList, onCheckBtnClick }) {\r\n    return (\r\n        <>\r\n        {todoList.map((todo) => (\r\n            <Todo key={todo.id} todo={todo} onCheckBtnClick={onCheckBtnClick}/>\r\n            \r\n        ))}\r\n        </>\r\n    );\r\n}\r\n","import TodoList from \"./components/TodoList\";\nimport Textfield from \"@atlaskit/textfield\";\nimport Button from \"@atlaskit/button\";\nimport { useCallback, useState, useEffect } from 'react'\nimport { v4 } from \"uuid\";\n\nconst TODO_APP_STORAGE_KEY = 'TODO_APP';\n\nfunction App() {\n  //state, props\n  const [todoList, setTodoList] = useState([]); // trả về 1 array với 2 element : 1 biến để lưu trữ state - 1 method dùng để cập nhật State này\n  const [textInput, setTextInput] = useState(\"\");\n\n  useEffect(() => {\n    const storagedTodoList = localStorage.getItem(TODO_APP_STORAGE_KEY);\n    if (storagedTodoList) {\n      setTodoList(JSON.parse(storagedTodoList));\n    }\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem(TODO_APP_STORAGE_KEY, JSON.stringify(todoList));\n  }, [todoList]);\n\n\n  const onTextInputChange = useCallback((e) => {\n    setTextInput(e.target.value);\n  }, []);\n\n  const onAddBtnClick = useCallback(\n    (e) => {\n      //them text input vao danh sach todo listlist\n      setTodoList([\n        { id: v4(), name: textInput, isCompleted: false },\n        ...todoList,\n      ]);\n      setTextInput(\"\");\n    },\n    [textInput, todoList]\n  );\n\n  const onCheckBtnClick = useCallback((id) => {\n    setTodoList(prevState =>\n      prevState.map(todo =>\n        todo.id === id ? { ...todo, isCompleted: true } : todo\n      )\n    );\n  }, []);\n\n  return (\n    <>\n      <h3>\n        Danh sach can lam\n      </h3>\n      <Textfield name='add-todo' placeholder='Them viec can lam...' elemAfterInput={\n        <Button\n          isDisabled={!textInput}\n          appearance='primary'\n          onClick={onAddBtnClick}\n        >\n          Thêm\n        </Button>\n      }\n        css={{ padding: \"2px 4px 2px\" }}\n        value={textInput}\n        onChange={onTextInputChange}\n      ></Textfield>\n      <TodoList todoList={todoList} onCheckBtnClick={onCheckBtnClick} />\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}